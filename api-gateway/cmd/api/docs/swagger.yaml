definitions:
  request.InsertProblem:
    properties:
      created_at:
        type: string
      description:
        type: string
      difficulty:
        type: string
      first_half:
        items:
          type: integer
        type: array
      memory_limit:
        type: integer
      prime:
        type: boolean
      second_half:
        items:
          type: integer
        type: array
      tags:
        items:
          type: string
        type: array
      test_cases:
        items:
          $ref: '#/definitions/request.TestCase'
        type: array
      time_limit:
        type: integer
      title:
        type: string
    type: object
  request.NewPassword:
    properties:
      confirmpassword:
        type: string
      password:
        type: string
    type: object
  request.TestCase:
    properties:
      input:
        type: string
      output:
        type: string
    type: object
  request.UserSignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.UserSignUpRequest:
    properties:
      confirmpassword:
        minLength: 8
        type: string
      email:
        type: string
      first_name:
        minLength: 3
        type: string
      last_name:
        minLength: 3
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 6
        type: string
    required:
    - confirmpassword
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  response.BlockedStatus:
    properties:
      blocked:
        type: boolean
      id:
        type: integer
    type: object
  response.JsonResponse:
    properties:
      data: {}
      error: {}
      message:
        type: string
    type: object
  response.Problem:
    properties:
      created_at:
        type: string
      description:
        type: string
      difficulty:
        type: string
      id:
        type: string
      memory_limit:
        type: integer
      prime:
        type: boolean
      tags:
        items:
          type: string
        type: array
      test_cases:
        items:
          $ref: '#/definitions/response.TestCase'
        type: array
      time_limit:
        type: integer
      title:
        type: string
    type: object
  response.SignUpWrapper:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/response.UserSignUpResponse'
    type: object
  response.TestCase:
    properties:
      input:
        type: string
      output:
        type: string
    type: object
  response.User:
    properties:
      blocked:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        description: for proper representaion of null value in go sql.Null is used
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  response.UserSignUpResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        description: for proper representaion of null value in go sql.Null is used
        type: string
      prime:
        type: boolean
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample code execution platform.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/
  title: Code Up Project API Documentation
  version: "1.0"
paths:
  /admin/problem/:
    post:
      consumes:
      - application/json
      description: Admin create a problem
      parameters:
      - description: create problem
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.InsertProblem'
      produces:
      - application/json
      responses:
        "201":
          description: 'Success: Problem created'
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - BearerAuth: []
      summary: Create a Problem
      tags:
      - Problem Management
  /admin/problem/first/{id}:
    put:
      consumes:
      - text/plain
      description: Admin insert first half of problem
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: string
      - description: insert into problem
        in: body
        name: code
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: 'Success: Problem Modified'
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - BearerAuth: []
      summary: Insert first half of problem
      tags:
      - Problem Management
  /admin/problem/second/{id}:
    put:
      consumes:
      - text/plain
      description: Admin insert second half of problem
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: string
      - description: Modified problem
        in: body
        name: code
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: 'Success: Problem Modified'
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - BearerAuth: []
      summary: Insert second half of problem
      tags:
      - Problem Management
  /admin/user/:
    get:
      description: Admin Gets the list of all users
      produces:
      - application/json
      responses:
        "201":
          description: 'Success: get all users'
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
        "400":
          description: Bad request
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
        "500":
          description: Internal server error
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - User Management
  /admin/user/{id}:
    patch:
      description: Admin Can block/unblock user by passing id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: 'Success: get all users'
          schema:
            $ref: '#/definitions/response.BlockedStatus'
        "204":
          description: no users
          schema:
            $ref: '#/definitions/response.BlockedStatus'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.BlockedStatus'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.BlockedStatus'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.BlockedStatus'
      security:
      - BearerAuth: []
      summary: Block user
      tags:
      - User Management
  /admin/user/{keyword}:
    get:
      description: Admin Gets the list of all users using keyworkd
      parameters:
      - description: keyword
        in: path
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: 'Success: get all users'
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
        "204":
          description: no users
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
        "400":
          description: Bad request
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
        "500":
          description: Internal server error
          schema:
            items:
              $ref: '#/definitions/response.User'
            type: array
      security:
      - BearerAuth: []
      summary: Search Users
      tags:
      - User Management
  /user/go/{id}:
    post:
      consumes:
      - text/plain
      description: The code the user sent will be executed and the result will be
        given
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: string
      - description: Go code to execute
        in: body
        name: code
        required: true
        schema:
          type: string
      produces:
      - text/plain
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - BearerAuth: []
      summary: Execute code
      tags:
      - Problem Execution Service
  /user/go/exec:
    post:
      consumes:
      - text/plain
      description: The code the user sent will be executed
      parameters:
      - description: Go code to execute
        in: body
        name: code
        required: true
        schema:
          type: string
      produces:
      - text/plain
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - BearerAuth: []
      summary: Execute code
      tags:
      - Problem Execution Service
  /user/panal/password:
    put:
      consumes:
      - application/json
      description: to replace the password with new one
      parameters:
      - description: new password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/request.NewPassword'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.JsonResponse'
      security:
      - BearerAuth: []
      summary: Forget Password
      tags:
      - User Panel
  /user/panal/unsubscribe:
    patch:
      description: Unsubscribe from prime membership
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.User'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.User'
      security:
      - BearerAuth: []
      summary: Unsubscribe
      tags:
      - User Panel
  /user/problem:
    get:
      description: Get Problem by difficulty or tags
      parameters:
      - description: 'tags, difficulty '
        in: query
        name: searchBy
        required: true
        type: string
      - description: 'Difficulty: easy, hard, medium. Tags:array, strigs,etc'
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.JsonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.JsonResponse'
      summary: Search Problem
      tags:
      - general
  /user/problem/{id}:
    get:
      consumes:
      - application/json
      description: get one problem to display
      parameters:
      - description: Problem ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Problem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Problem'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Problem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Problem'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Problem'
      security:
      - BearerAuth: []
      summary: get one problems
      tags:
      - Problem Execution Service
  /user/signin:
    post:
      consumes:
      - application/json
      description: signin to code-up
      parameters:
      - description: user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UserSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
      summary: User signin
      tags:
      - Authentication
  /user/signup:
    post:
      consumes:
      - application/json
      description: signup to code-up
      parameters:
      - description: user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UserSignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.SignUpWrapper'
      summary: User signup
      tags:
      - Authentication
  /user/view:
    get:
      consumes:
      - application/json
      description: View all problems code-up
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.Problem'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/response.Problem'
            type: array
        "401":
          description: Unauthorized
          schema:
            items:
              $ref: '#/definitions/response.Problem'
            type: array
        "404":
          description: Not Found
          schema:
            items:
              $ref: '#/definitions/response.Problem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/response.Problem'
            type: array
      summary: View problems
      tags:
      - general
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
