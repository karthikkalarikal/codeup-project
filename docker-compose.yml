version: '3'

services:
  
  # frontend-service:
  #   build:
  #     context: ./front-end
  #     dockerfile: frontend.dockerfile
  #   restart: always
  #   ports:
  #     - "8082:80"
  #   deploy:
  #     mode: replicated
  #     replicas: 1


  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: api-gateway.dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1


  authentication-service:
    build:
      context: ./authentication-service
      dockerfile: ./authentication-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=postgres sslmode=disable timezone=UTC connect_timeout=5"

  problem-service:
    build:
      context: ./problem-service
      dockerfile: problem-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  go-sandbox:
    build:
      context: ./sandbox-go
      dockerfile: go-sandbox.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    # security_opt:
    #   - seccomp:/etc/docker/seccomp/golang-app-seccomp.json

  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
     POSTGRES_USER: postgres
     POSTGRES_PASSWORD: password
     POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/


  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: problems
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db
    
